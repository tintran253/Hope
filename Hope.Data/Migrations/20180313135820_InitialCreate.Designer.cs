// <auto-generated />
using Hope.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Hope.Data.Migrations
{
    [DbContext(typeof(HopeContext))]
    [Migration("20180313135820_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hope.Core.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComposerId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Published");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ComposerId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Hope.Core.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<string>("Content");

                    b.Property<int>("ReaderId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hope.Core.Composer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("Hope.Core.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<int>("ReaderId");

                    b.Property<int>("Stars");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Hope.Core.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Hope.Core.Article", b =>
                {
                    b.HasOne("Hope.Core.Composer", "Composer")
                        .WithMany("Articles")
                        .HasForeignKey("ComposerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hope.Core.Comment", b =>
                {
                    b.HasOne("Hope.Core.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hope.Core.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hope.Core.Rate", b =>
                {
                    b.HasOne("Hope.Core.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hope.Core.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
